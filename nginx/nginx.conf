events {}
http {
  include mime.types;

#  resolver 127.0.0.11;
  
  server {
   resolver 127.0.0.11;

    listen 443 ssl;
    server_name hot.stzups.net;

    ssl_certificate /etc/letsencrypt/live/hot.stzups.net/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/hot.stzups.net/privkey.pem;

    location / {

    }
    
    # qBittorrent
    # https://github.com/qbittorrent/qBittorrent/wiki/NGINX-Reverse-Proxy-for-Web-UI
    location /qbittorrent/ {
      proxy_pass http://openvpn-client:8080/;
      
      proxy_http_version 1.1;
      http2_push_preload on; # Enable http2 push

      proxy_set_header Host 127.0.0.1:8080;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Forwarded-Host $http_host;
      proxy_set_header X-Forwarded-For $remote_addr;
      proxy_set_header X-Real-IP $remote_addr;

      # optionally, you can adjust the POST request size limit, to allow adding a lot of torrents at once:
      #client_max_body_size 100M;

      # since v4.2.2, is possible to configure qBittorrent
      # to set the "Secure" flag for the session cookie automatically.
      # However, that option does nothing unless using qBittorrent's built-in HTTPS functionality.
      # For this use case, where qBittorrent itself is using plain HTTP
      # (and regardless of whether or not the external website uses HTTPS),
      # the flag must be set here, in the proxy configuration itself:
      proxy_cookie_path / "/; Secure";
    }
    
    # radarr
    location /radarr/ {
      proxy_pass http://openvpn-client:7878/radarr/;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
    
    # jackett
    # https://github.com/Jackett/Jackett#running-jackett-behind-a-reverse-proxy
    location /jackett {
      proxy_pass http://openvpn-client:9117;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Forwarded-Host $http_host;
      proxy_redirect off;
    }
    
    # jellyfin
    # https://jellyfin.org/docs/general/networking/nginx.html
    location /jellyfin/ {
      proxy_pass http://jellyfin:8096/jellyfin/;

      proxy_pass_request_headers on;

      proxy_set_header Host $host;

      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Forwarded-Host $http_host;

      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $http_connection;

      # Disable buffering when the nginx proxy gets very resource heavy upon streaming
      proxy_buffering off;
    }
  }
}
